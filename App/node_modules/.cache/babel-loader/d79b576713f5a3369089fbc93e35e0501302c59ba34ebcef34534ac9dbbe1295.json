{"ast":null,"code":"import { Chart } from 'chart.js';\n\n// Charts configuration and setup\nclass ChartManager {\n  constructor(sensorData) {\n    this.sensorData = sensorData;\n    this.charts = {};\n    this.initializeCharts();\n  }\n  initializeCharts() {\n    // Temperature & Humidity Chart\n    const tempHumCtx = document.getElementById('tempHumChart').getContext('2d');\n    this.charts.tempHum = new Chart(tempHumCtx, {\n      type: 'line',\n      data: {\n        labels: this.sensorData.historicalData.labels,\n        datasets: [{\n          label: 'Temperature (°C)',\n          data: this.sensorData.historicalData.temperature,\n          borderColor: '#3b82f6',\n          backgroundColor: '#93c5fd50',\n          fill: true,\n          tension: 0.4\n        }, {\n          label: 'Humidity (%)',\n          data: this.sensorData.historicalData.humidity,\n          borderColor: '#10b981',\n          backgroundColor: '#6ee7b750',\n          fill: true,\n          tension: 0.4\n        }]\n      },\n      options: this.getChartOptions('Temperature & Humidity Over Time')\n    });\n\n    // Air Quality & Occupancy Chart\n    const airOccCtx = document.getElementById('airOccupancyChart').getContext('2d');\n    this.charts.airOcc = new Chart(airOccCtx, {\n      type: 'line',\n      data: {\n        labels: this.sensorData.historicalData.labels,\n        datasets: [{\n          label: 'Air Quality (%)',\n          data: this.sensorData.historicalData.airQuality,\n          borderColor: '#f59e0b',\n          backgroundColor: '#fcd34d50',\n          fill: true,\n          tension: 0.4\n        }, {\n          label: 'People Count',\n          data: this.sensorData.historicalData.peopleCount,\n          borderColor: '#6366f1',\n          backgroundColor: '#a5b4fc50',\n          fill: true,\n          tension: 0.4\n        }]\n      },\n      options: this.getChartOptions('Air Quality & Occupancy Over Time')\n    });\n  }\n  getChartOptions(title) {\n    return {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        title: {\n          display: true,\n          text: title,\n          font: {\n            size: 16,\n            weight: 'normal'\n          }\n        },\n        legend: {\n          position: 'bottom'\n        }\n      },\n      scales: {\n        x: {\n          grid: {\n            display: false\n          }\n        },\n        y: {\n          beginAtZero: true,\n          grid: {\n            color: '#e5e7eb'\n          }\n        }\n      },\n      interaction: {\n        intersect: false,\n        mode: 'index'\n      }\n    };\n  }\n  updateCharts(data, historicalData) {\n    // Update Temperature & Humidity Chart\n    this.charts.tempHum.data.labels = historicalData.labels;\n    this.charts.tempHum.data.datasets[0].data = historicalData.temperature;\n    this.charts.tempHum.data.datasets[1].data = historicalData.humidity;\n    this.charts.tempHum.update('none');\n\n    // Update Air Quality & Occupancy Chart\n    this.charts.airOcc.data.labels = historicalData.labels;\n    this.charts.airOcc.data.datasets[0].data = historicalData.airQuality;\n    this.charts.airOcc.data.datasets[1].data = historicalData.peopleCount;\n    this.charts.airOcc.update('none');\n  }\n}\nexport default ChartManager;","map":{"version":3,"names":["Chart","ChartManager","constructor","sensorData","charts","initializeCharts","tempHumCtx","document","getElementById","getContext","tempHum","type","data","labels","historicalData","datasets","label","temperature","borderColor","backgroundColor","fill","tension","humidity","options","getChartOptions","airOccCtx","airOcc","airQuality","peopleCount","title","responsive","maintainAspectRatio","plugins","display","text","font","size","weight","legend","position","scales","x","grid","y","beginAtZero","color","interaction","intersect","mode","updateCharts","update"],"sources":["C:/Users/mauri/OneDrive/Documents/Programacion/JavaScript/React/retoiot1/src/js/charts.js"],"sourcesContent":["import { Chart } from 'chart.js';\r\n\r\n// Charts configuration and setup\r\nclass ChartManager {\r\n    constructor(sensorData) {\r\n        this.sensorData = sensorData;\r\n        this.charts = {};\r\n        this.initializeCharts();\r\n    }\r\n\r\n    initializeCharts() {\r\n        // Temperature & Humidity Chart\r\n        const tempHumCtx = document.getElementById('tempHumChart').getContext('2d');\r\n        this.charts.tempHum = new Chart(tempHumCtx, {\r\n            type: 'line',\r\n            data: {\r\n                labels: this.sensorData.historicalData.labels,\r\n                datasets: [\r\n                    {\r\n                        label: 'Temperature (°C)',\r\n                        data: this.sensorData.historicalData.temperature,\r\n                        borderColor: '#3b82f6',\r\n                        backgroundColor: '#93c5fd50',\r\n                        fill: true,\r\n                        tension: 0.4\r\n                    },\r\n                    {\r\n                        label: 'Humidity (%)',\r\n                        data: this.sensorData.historicalData.humidity,\r\n                        borderColor: '#10b981',\r\n                        backgroundColor: '#6ee7b750',\r\n                        fill: true,\r\n                        tension: 0.4\r\n                    }\r\n                ]\r\n            },\r\n            options: this.getChartOptions('Temperature & Humidity Over Time')\r\n        });\r\n\r\n        // Air Quality & Occupancy Chart\r\n        const airOccCtx = document.getElementById('airOccupancyChart').getContext('2d');\r\n        this.charts.airOcc = new Chart(airOccCtx, {\r\n            type: 'line',\r\n            data: {\r\n                labels: this.sensorData.historicalData.labels,\r\n                datasets: [\r\n                    {\r\n                        label: 'Air Quality (%)',\r\n                        data: this.sensorData.historicalData.airQuality,\r\n                        borderColor: '#f59e0b',\r\n                        backgroundColor: '#fcd34d50',\r\n                        fill: true,\r\n                        tension: 0.4\r\n                    },\r\n                    {\r\n                        label: 'People Count',\r\n                        data: this.sensorData.historicalData.peopleCount,\r\n                        borderColor: '#6366f1',\r\n                        backgroundColor: '#a5b4fc50',\r\n                        fill: true,\r\n                        tension: 0.4\r\n                    }\r\n                ]\r\n            },\r\n            options: this.getChartOptions('Air Quality & Occupancy Over Time')\r\n        });\r\n    }\r\n\r\n    getChartOptions(title) {\r\n        return {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n                title: {\r\n                    display: true,\r\n                    text: title,\r\n                    font: {\r\n                        size: 16,\r\n                        weight: 'normal'\r\n                    }\r\n                },\r\n                legend: {\r\n                    position: 'bottom'\r\n                }\r\n            },\r\n            scales: {\r\n                x: {\r\n                    grid: {\r\n                        display: false\r\n                    }\r\n                },\r\n                y: {\r\n                    beginAtZero: true,\r\n                    grid: {\r\n                        color: '#e5e7eb'\r\n                    }\r\n                }\r\n            },\r\n            interaction: {\r\n                intersect: false,\r\n                mode: 'index'\r\n            }\r\n        };\r\n    }\r\n\r\n    updateCharts(data, historicalData) {\r\n        // Update Temperature & Humidity Chart\r\n        this.charts.tempHum.data.labels = historicalData.labels;\r\n        this.charts.tempHum.data.datasets[0].data = historicalData.temperature;\r\n        this.charts.tempHum.data.datasets[1].data = historicalData.humidity;\r\n        this.charts.tempHum.update('none');\r\n\r\n        // Update Air Quality & Occupancy Chart\r\n        this.charts.airOcc.data.labels = historicalData.labels;\r\n        this.charts.airOcc.data.datasets[0].data = historicalData.airQuality;\r\n        this.charts.airOcc.data.datasets[1].data = historicalData.peopleCount;\r\n        this.charts.airOcc.update('none');\r\n    }\r\n}\r\n\r\nexport default ChartManager;"],"mappings":"AAAA,SAASA,KAAK,QAAQ,UAAU;;AAEhC;AACA,MAAMC,YAAY,CAAC;EACfC,WAAWA,CAACC,UAAU,EAAE;IACpB,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,gBAAgB,CAAC,CAAC;EAC3B;EAEAA,gBAAgBA,CAAA,EAAG;IACf;IACA,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;IAC3E,IAAI,CAACL,MAAM,CAACM,OAAO,GAAG,IAAIV,KAAK,CAACM,UAAU,EAAE;MACxCK,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;QACFC,MAAM,EAAE,IAAI,CAACV,UAAU,CAACW,cAAc,CAACD,MAAM;QAC7CE,QAAQ,EAAE,CACN;UACIC,KAAK,EAAE,kBAAkB;UACzBJ,IAAI,EAAE,IAAI,CAACT,UAAU,CAACW,cAAc,CAACG,WAAW;UAChDC,WAAW,EAAE,SAAS;UACtBC,eAAe,EAAE,WAAW;UAC5BC,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE;QACb,CAAC,EACD;UACIL,KAAK,EAAE,cAAc;UACrBJ,IAAI,EAAE,IAAI,CAACT,UAAU,CAACW,cAAc,CAACQ,QAAQ;UAC7CJ,WAAW,EAAE,SAAS;UACtBC,eAAe,EAAE,WAAW;UAC5BC,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE;QACb,CAAC;MAET,CAAC;MACDE,OAAO,EAAE,IAAI,CAACC,eAAe,CAAC,kCAAkC;IACpE,CAAC,CAAC;;IAEF;IACA,MAAMC,SAAS,GAAGlB,QAAQ,CAACC,cAAc,CAAC,mBAAmB,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;IAC/E,IAAI,CAACL,MAAM,CAACsB,MAAM,GAAG,IAAI1B,KAAK,CAACyB,SAAS,EAAE;MACtCd,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;QACFC,MAAM,EAAE,IAAI,CAACV,UAAU,CAACW,cAAc,CAACD,MAAM;QAC7CE,QAAQ,EAAE,CACN;UACIC,KAAK,EAAE,iBAAiB;UACxBJ,IAAI,EAAE,IAAI,CAACT,UAAU,CAACW,cAAc,CAACa,UAAU;UAC/CT,WAAW,EAAE,SAAS;UACtBC,eAAe,EAAE,WAAW;UAC5BC,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE;QACb,CAAC,EACD;UACIL,KAAK,EAAE,cAAc;UACrBJ,IAAI,EAAE,IAAI,CAACT,UAAU,CAACW,cAAc,CAACc,WAAW;UAChDV,WAAW,EAAE,SAAS;UACtBC,eAAe,EAAE,WAAW;UAC5BC,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE;QACb,CAAC;MAET,CAAC;MACDE,OAAO,EAAE,IAAI,CAACC,eAAe,CAAC,mCAAmC;IACrE,CAAC,CAAC;EACN;EAEAA,eAAeA,CAACK,KAAK,EAAE;IACnB,OAAO;MACHC,UAAU,EAAE,IAAI;MAChBC,mBAAmB,EAAE,KAAK;MAC1BC,OAAO,EAAE;QACLH,KAAK,EAAE;UACHI,OAAO,EAAE,IAAI;UACbC,IAAI,EAAEL,KAAK;UACXM,IAAI,EAAE;YACFC,IAAI,EAAE,EAAE;YACRC,MAAM,EAAE;UACZ;QACJ,CAAC;QACDC,MAAM,EAAE;UACJC,QAAQ,EAAE;QACd;MACJ,CAAC;MACDC,MAAM,EAAE;QACJC,CAAC,EAAE;UACCC,IAAI,EAAE;YACFT,OAAO,EAAE;UACb;QACJ,CAAC;QACDU,CAAC,EAAE;UACCC,WAAW,EAAE,IAAI;UACjBF,IAAI,EAAE;YACFG,KAAK,EAAE;UACX;QACJ;MACJ,CAAC;MACDC,WAAW,EAAE;QACTC,SAAS,EAAE,KAAK;QAChBC,IAAI,EAAE;MACV;IACJ,CAAC;EACL;EAEAC,YAAYA,CAACrC,IAAI,EAAEE,cAAc,EAAE;IAC/B;IACA,IAAI,CAACV,MAAM,CAACM,OAAO,CAACE,IAAI,CAACC,MAAM,GAAGC,cAAc,CAACD,MAAM;IACvD,IAAI,CAACT,MAAM,CAACM,OAAO,CAACE,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC,CAACH,IAAI,GAAGE,cAAc,CAACG,WAAW;IACtE,IAAI,CAACb,MAAM,CAACM,OAAO,CAACE,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC,CAACH,IAAI,GAAGE,cAAc,CAACQ,QAAQ;IACnE,IAAI,CAAClB,MAAM,CAACM,OAAO,CAACwC,MAAM,CAAC,MAAM,CAAC;;IAElC;IACA,IAAI,CAAC9C,MAAM,CAACsB,MAAM,CAACd,IAAI,CAACC,MAAM,GAAGC,cAAc,CAACD,MAAM;IACtD,IAAI,CAACT,MAAM,CAACsB,MAAM,CAACd,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC,CAACH,IAAI,GAAGE,cAAc,CAACa,UAAU;IACpE,IAAI,CAACvB,MAAM,CAACsB,MAAM,CAACd,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC,CAACH,IAAI,GAAGE,cAAc,CAACc,WAAW;IACrE,IAAI,CAACxB,MAAM,CAACsB,MAAM,CAACwB,MAAM,CAAC,MAAM,CAAC;EACrC;AACJ;AAEA,eAAejD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}