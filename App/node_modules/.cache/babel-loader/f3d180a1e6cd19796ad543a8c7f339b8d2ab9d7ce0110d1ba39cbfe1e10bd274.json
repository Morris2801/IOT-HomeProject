{"ast":null,"code":"// ThingSpeak configuration\nclass ThingSpeakData {\n  constructor() {\n    // Reemplaza estos valores con tus datos de ThingSpeak\n    this.channelID = '2739575';\n    this.readAPIKey = 'MOM63169N1QBIC3I';\n    this.data = {\n      temperature: 0,\n      humidity: 0,\n      airQuality: 0,\n      peopleCount: 0\n    };\n    this.historicalData = {\n      labels: [],\n      temperature: [],\n      humidity: [],\n      airQuality: [],\n      peopleCount: []\n    };\n    this.subscribers = [];\n  }\n\n  // Obtener datos actuales\n  async fetchCurrentData() {\n    try {\n      const response = await fetch(\"https://api.thingspeak.com/channels/${this.channelID}/feeds/last.json?api_key=${this.readAPIKey}\");\n      const data = await response.json();\n\n      // Mapea los campos según tu configuración de ThingSpeak\n      this.data = {\n        temperature: parseFloat(data.field1) || 0,\n        // Asume que field1 es temperatura\n        humidity: parseFloat(data.field2) || 0,\n        // Asume que field2 es humedad\n        airQuality: parseFloat(data.field3) || 0,\n        // Asume que field3 es calidad del aire\n        peopleCount: parseInt(data.field4) || 0 // Asume que field4 es conteo de personas\n      };\n      this.notifySubscribers();\n    } catch (error) {\n      console.error('Error fetching ThingSpeak data:', error);\n    }\n  }\n\n  // Obtener datos históricos\n  async fetchHistoricalData() {\n    try {\n      // Obtener últimas 100 entradas\n      const response = await fetch(\"https://api.thingspeak.com/channels/${this.channelID}/feeds.json?api_key=${this.readAPIKey}&results=100\");\n      const data = await response.json();\n      this.historicalData = {\n        labels: [],\n        temperature: [],\n        humidity: [],\n        airQuality: [],\n        peopleCount: []\n      };\n\n      // Procesar datos históricos\n      data.feeds.forEach(feed => {\n        const date = new Date(feed.created_at);\n        this.historicalData.labels.push(date.toLocaleTimeString('es-ES', {\n          hour: '2-digit',\n          minute: '2-digit'\n        }));\n        this.historicalData.temperature.push(parseFloat(feed.field1) || 0);\n        this.historicalData.humidity.push(parseFloat(feed.field2) || 0);\n        this.historicalData.airQuality.push(parseFloat(feed.field3) || 0);\n        this.historicalData.peopleCount.push(parseInt(feed.field4) || 0);\n      });\n      this.notifySubscribers();\n    } catch (error) {\n      console.error('Error fetching ThingSpeak historical data:', error);\n    }\n  }\n\n  // Iniciar actualizaciones periódicas\n  startUpdates() {\n    // Obtener datos iniciales\n    this.fetchCurrentData();\n    this.fetchHistoricalData();\n\n    // Actualizar cada 15 segundos\n    setInterval(() => {\n      this.fetchCurrentData();\n    }, 15000);\n\n    // Actualizar datos históricos cada minuto\n    setInterval(() => {\n      this.fetchHistoricalData();\n    }, 60000);\n  }\n\n  // Sistema de suscripción para actualizaciones\n  subscribe(callback) {\n    this.subscribers.push(callback);\n  }\n  notifySubscribers() {\n    this.subscribers.forEach(callback => callback(this.data, this.historicalData));\n  }\n}\n\n// Exportar instancia\nconst thingSpeakData = new ThingSpeakData();\nexport default thingSpeakData;","map":{"version":3,"names":["ThingSpeakData","constructor","channelID","readAPIKey","data","temperature","humidity","airQuality","peopleCount","historicalData","labels","subscribers","fetchCurrentData","response","fetch","json","parseFloat","field1","field2","field3","parseInt","field4","notifySubscribers","error","console","fetchHistoricalData","feeds","forEach","feed","date","Date","created_at","push","toLocaleTimeString","hour","minute","startUpdates","setInterval","subscribe","callback","thingSpeakData"],"sources":["C:/Users/mauri/OneDrive/Documents/Programacion/JavaScript/React/retoiot1/src/js/data.js"],"sourcesContent":["// ThingSpeak configuration\r\nclass ThingSpeakData {\r\n    constructor() {\r\n        // Reemplaza estos valores con tus datos de ThingSpeak\r\n        this.channelID = '2739575';\r\n        this.readAPIKey = 'MOM63169N1QBIC3I';\r\n        \r\n        this.data = {\r\n            temperature: 0,\r\n            humidity: 0,\r\n            airQuality: 0,\r\n            peopleCount: 0\r\n        };\r\n\r\n        this.historicalData = {\r\n            labels: [],\r\n            temperature: [],\r\n            humidity: [],\r\n            airQuality: [],\r\n            peopleCount: []\r\n        };\r\n\r\n        this.subscribers = [];\r\n    }\r\n\r\n    // Obtener datos actuales\r\n    async fetchCurrentData() {\r\n        try {\r\n            const response = await fetch(\"https://api.thingspeak.com/channels/${this.channelID}/feeds/last.json?api_key=${this.readAPIKey}\");\r\n            const data = await response.json();\r\n            \r\n            // Mapea los campos según tu configuración de ThingSpeak\r\n            this.data = {\r\n                temperature: parseFloat(data.field1) || 0,  // Asume que field1 es temperatura\r\n                humidity: parseFloat(data.field2) || 0,     // Asume que field2 es humedad\r\n                airQuality: parseFloat(data.field3) || 0,   // Asume que field3 es calidad del aire\r\n                peopleCount: parseInt(data.field4) || 0     // Asume que field4 es conteo de personas\r\n            };\r\n\r\n            this.notifySubscribers();\r\n        } catch (error) {\r\n            console.error('Error fetching ThingSpeak data:', error);\r\n        }\r\n    }\r\n\r\n    // Obtener datos históricos\r\n    async fetchHistoricalData() {\r\n        try {\r\n            // Obtener últimas 100 entradas\r\n            const response = await fetch(\"https://api.thingspeak.com/channels/${this.channelID}/feeds.json?api_key=${this.readAPIKey}&results=100\");\r\n            const data = await response.json();\r\n            \r\n            this.historicalData = {\r\n                labels: [],\r\n                temperature: [],\r\n                humidity: [],\r\n                airQuality: [],\r\n                peopleCount: []\r\n            };\r\n\r\n            // Procesar datos históricos\r\n            data.feeds.forEach(feed => {\r\n                const date = new Date(feed.created_at);\r\n                this.historicalData.labels.push(\r\n                    date.toLocaleTimeString('es-ES', { \r\n                        hour: '2-digit', \r\n                        minute: '2-digit' \r\n                    })\r\n                );\r\n                \r\n                this.historicalData.temperature.push(parseFloat(feed.field1) || 0);\r\n                this.historicalData.humidity.push(parseFloat(feed.field2) || 0);\r\n                this.historicalData.airQuality.push(parseFloat(feed.field3) || 0);\r\n                this.historicalData.peopleCount.push(parseInt(feed.field4) || 0);\r\n            });\r\n\r\n            this.notifySubscribers();\r\n        } catch (error) {\r\n            console.error('Error fetching ThingSpeak historical data:', error);\r\n        }\r\n    }\r\n\r\n    // Iniciar actualizaciones periódicas\r\n    startUpdates() {\r\n        // Obtener datos iniciales\r\n        this.fetchCurrentData();\r\n        this.fetchHistoricalData();\r\n\r\n        // Actualizar cada 15 segundos\r\n        setInterval(() => {\r\n            this.fetchCurrentData();\r\n        }, 15000);\r\n\r\n        // Actualizar datos históricos cada minuto\r\n        setInterval(() => {\r\n            this.fetchHistoricalData();\r\n        }, 60000);\r\n    }\r\n\r\n    // Sistema de suscripción para actualizaciones\r\n    subscribe(callback) {\r\n        this.subscribers.push(callback);\r\n    }\r\n\r\n    notifySubscribers() {\r\n        this.subscribers.forEach(callback => callback(this.data, this.historicalData));\r\n    }\r\n}\r\n\r\n// Exportar instancia\r\nconst thingSpeakData = new ThingSpeakData();\r\nexport default thingSpeakData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}