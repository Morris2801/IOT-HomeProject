{"ast":null,"code":"// ThingSpeak configuration \nclass ThingSpeakData {\n  constructor() {\n    // Replace with your ThingSpeak channel data\n    this.channelID = '2739575';\n    this.readAPIKey = 'MOM63169N1QBIC3I';\n\n    // Initial data structure for current data and historical data\n    this.data = {\n      temperature: 0,\n      humidity: 0,\n      airQuality: 0,\n      peopleCount: 0\n    };\n    this.historicalData = {\n      labels: [],\n      temperature: [],\n      humidity: [],\n      airQuality: [],\n      peopleCount: []\n    };\n    this.subscribers = [];\n  }\n\n  // Get current data from ThingSpeak\n  async fetchCurrentData() {\n    try {\n      const response = await fetch(`https://api.thingspeak.com/channels/${this.channelID}/feeds/last.json?api_key=${this.readAPIKey}`);\n      const data = await response.json();\n\n      // Map fields to your data structure\n      this.data = {\n        temperature: parseFloat(data.field1) || 0,\n        // Assume field1 is temperature\n        humidity: parseFloat(data.field2) || 0,\n        // Assume field2 is humidity\n        airQuality: parseFloat(data.field3) || 0,\n        // Assume field3 is air quality\n        peopleCount: parseInt(data.field4) || 0 // Assume field4 is people count\n      };\n      this.notifySubscribers(); // Notify subscribers with the updated data\n    } catch (error) {\n      console.error('Error fetching ThingSpeak data:', error);\n    }\n  }\n\n  // Get historical data from ThingSpeak\n  async fetchHistoricalData() {\n    try {\n      // Fetch the last 100 entries from ThingSpeak\n      const response = await fetch(`https://api.thingspeak.com/channels/${this.channelID}/feeds.json?api_key=${this.readAPIKey}&results=100`);\n      const data = await response.json();\n\n      // Initialize historical data object if it's not already initialized\n      this.historicalData = {\n        labels: [],\n        temperature: [],\n        humidity: [],\n        airQuality: [],\n        peopleCount: []\n      };\n\n      // Check if data.feeds exists and has data\n      if (!data.feeds || data.feeds.length === 0) {\n        console.error('No historical data available');\n        return; // Return early if no data\n      }\n\n      // Process the historical data from ThingSpeak\n      data.feeds.forEach(feed => {\n        const date = new Date(feed.created_at);\n        this.historicalData.labels.push(date.toLocaleTimeString('es-ES', {\n          hour: '2-digit',\n          minute: '2-digit'\n        }));\n\n        // Push data values to the corresponding arrays\n        this.historicalData.temperature.push(parseFloat(feed.field1) || 0);\n        this.historicalData.humidity.push(parseFloat(feed.field2) || 0);\n        this.historicalData.airQuality.push(parseFloat(feed.field3) || 0);\n        this.historicalData.peopleCount.push(parseInt(feed.field4) || 0);\n      });\n      this.notifySubscribers(); // Notify subscribers with the updated historical data\n    } catch (error) {\n      console.error('Error fetching ThingSpeak historical data:', error);\n    }\n  }\n\n  // Start periodic updates for current and historical data\n  startUpdates() {\n    // Fetch initial data\n    this.fetchCurrentData();\n    this.fetchHistoricalData();\n\n    // Update current data every 15 seconds\n    setInterval(() => {\n      this.fetchCurrentData();\n    }, 15000);\n\n    // Update historical data every minute\n    setInterval(() => {\n      this.fetchHistoricalData();\n    }, 60000);\n  }\n\n  // Subscribe to data updates (for charting or UI update)\n  subscribe(callback) {\n    this.subscribers.push(callback);\n  }\n\n  // Notify all subscribers with the updated data\n  notifySubscribers() {\n    this.subscribers.forEach(callback => callback(this.data, this.historicalData));\n  }\n}\n\n// Export the ThingSpeakData instance for use in other parts of the app\nconst thingSpeakData = new ThingSpeakData();\nexport default thingSpeakData;","map":{"version":3,"names":["ThingSpeakData","constructor","channelID","readAPIKey","data","temperature","humidity","airQuality","peopleCount","historicalData","labels","subscribers","fetchCurrentData","response","fetch","json","parseFloat","field1","field2","field3","parseInt","field4","notifySubscribers","error","console","fetchHistoricalData","feeds","length","forEach","feed","date","Date","created_at","push","toLocaleTimeString","hour","minute","startUpdates","setInterval","subscribe","callback","thingSpeakData"],"sources":["C:/Users/mauri/OneDrive/Documents/Programacion/JavaScript/React/retoiot1/src/js/data.js"],"sourcesContent":["// ThingSpeak configuration \r\nclass ThingSpeakData {\r\n    constructor() {\r\n        // Replace with your ThingSpeak channel data\r\n        this.channelID = '2739575';\r\n        this.readAPIKey = 'MOM63169N1QBIC3I';\r\n        \r\n        // Initial data structure for current data and historical data\r\n        this.data = {\r\n            temperature: 0,\r\n            humidity: 0,\r\n            airQuality: 0,\r\n            peopleCount: 0\r\n        };\r\n\r\n        this.historicalData = {\r\n            labels: [],\r\n            temperature: [],\r\n            humidity: [],\r\n            airQuality: [],\r\n            peopleCount: []\r\n        };\r\n\r\n        this.subscribers = [];\r\n    }\r\n\r\n    // Get current data from ThingSpeak\r\n    async fetchCurrentData() {\r\n        try {\r\n            const response = await fetch(`https://api.thingspeak.com/channels/${this.channelID}/feeds/last.json?api_key=${this.readAPIKey}`);\r\n            const data = await response.json();\r\n            \r\n            // Map fields to your data structure\r\n            this.data = {\r\n                temperature: parseFloat(data.field1) || 0,  // Assume field1 is temperature\r\n                humidity: parseFloat(data.field2) || 0,    // Assume field2 is humidity\r\n                airQuality: parseFloat(data.field3) || 0,  // Assume field3 is air quality\r\n                peopleCount: parseInt(data.field4) || 0    // Assume field4 is people count\r\n            };\r\n\r\n            this.notifySubscribers();  // Notify subscribers with the updated data\r\n        } catch (error) {\r\n            console.error('Error fetching ThingSpeak data:', error);\r\n        }\r\n    }\r\n\r\n    // Get historical data from ThingSpeak\r\n    async fetchHistoricalData() {\r\n        try {\r\n            // Fetch the last 100 entries from ThingSpeak\r\n            const response = await fetch(`https://api.thingspeak.com/channels/${this.channelID}/feeds.json?api_key=${this.readAPIKey}&results=100`);\r\n            const data = await response.json();\r\n            \r\n            // Initialize historical data object if it's not already initialized\r\n            this.historicalData = {\r\n                labels: [],\r\n                temperature: [],\r\n                humidity: [],\r\n                airQuality: [],\r\n                peopleCount: []\r\n            };\r\n\r\n            // Check if data.feeds exists and has data\r\n            if (!data.feeds || data.feeds.length === 0) {\r\n                console.error('No historical data available');\r\n                return;  // Return early if no data\r\n            }\r\n\r\n            // Process the historical data from ThingSpeak\r\n            data.feeds.forEach(feed => {\r\n                const date = new Date(feed.created_at);\r\n                this.historicalData.labels.push(\r\n                    date.toLocaleTimeString('es-ES', { \r\n                        hour: '2-digit', \r\n                        minute: '2-digit' \r\n                    })\r\n                );\r\n\r\n                // Push data values to the corresponding arrays\r\n                this.historicalData.temperature.push(parseFloat(feed.field1) || 0);\r\n                this.historicalData.humidity.push(parseFloat(feed.field2) || 0);\r\n                this.historicalData.airQuality.push(parseFloat(feed.field3) || 0);\r\n                this.historicalData.peopleCount.push(parseInt(feed.field4) || 0);\r\n            });\r\n\r\n            this.notifySubscribers();  // Notify subscribers with the updated historical data\r\n        } catch (error) {\r\n            console.error('Error fetching ThingSpeak historical data:', error);\r\n        }\r\n    }\r\n\r\n    // Start periodic updates for current and historical data\r\n    startUpdates() {\r\n        // Fetch initial data\r\n        this.fetchCurrentData();\r\n        this.fetchHistoricalData();\r\n\r\n        // Update current data every 15 seconds\r\n        setInterval(() => {\r\n            this.fetchCurrentData();\r\n        }, 15000);\r\n\r\n        // Update historical data every minute\r\n        setInterval(() => {\r\n            this.fetchHistoricalData();\r\n        }, 60000);\r\n    }\r\n\r\n    // Subscribe to data updates (for charting or UI update)\r\n    subscribe(callback) {\r\n        this.subscribers.push(callback);\r\n    }\r\n\r\n    // Notify all subscribers with the updated data\r\n    notifySubscribers() {\r\n        this.subscribers.forEach(callback => callback(this.data, this.historicalData));\r\n    }\r\n}\r\n\r\n// Export the ThingSpeakData instance for use in other parts of the app\r\nconst thingSpeakData = new ThingSpeakData();\r\nexport default thingSpeakData;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}