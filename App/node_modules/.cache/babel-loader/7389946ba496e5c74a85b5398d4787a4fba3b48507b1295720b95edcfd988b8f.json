{"ast":null,"code":"export function initializeApp(sensorData, ChartManager) {\n  // Initialize Feather icons\n  feather.replace();\n\n  // Initialize charts\n  const chartManager = new ChartManager(sensorData);\n\n  // Page navigation\n  const navItems = document.querySelectorAll(\".nav-item\");\n  const pages = document.querySelectorAll(\".page\");\n  navItems.forEach(item => {\n    item.addEventListener(\"click\", () => {\n      const targetPage = item.dataset.page;\n\n      // Update navigation\n      navItems.forEach(nav => {\n        nav.classList.remove(\"active\");\n      });\n      item.classList.add(\"active\");\n\n      // Update pages\n      pages.forEach(page => {\n        page.classList.remove(\"active\");\n        if (page.id === targetPage) {\n          page.classList.add(\"active\");\n        }\n      });\n    });\n  });\n\n  // Update UI elements with sensor data\n  function updateUI(data) {\n    document.getElementById(\"temperature\").textContent = '${data.temperature.toFixed(1)}°C';\n    document.getElementById(\"humidity\").textContent = '${data.humidity}%';\n    document.getElementById(\"air-quality\").textContent = '${data.airQuality}%';\n    document.getElementById(\"people-count\").textContent = data.peopleCount;\n\n    // Update timestamps\n    const times = document.querySelectorAll(\".update-time\");\n    const now = new Date().toLocaleTimeString();\n    times.forEach(time => {\n      time.textContent = 'Updated at ${now}';\n    });\n  }\n\n  // Subscribe to sensor data updates\n  sensorData.subscribe((data, historicalData) => {\n    updateUI(data);\n    chartManager.updateCharts(data, historicalData);\n  });\n\n  // Control buttons functionality\n  const controlButtons = {\n    windows: document.getElementById(\"windows-btn\"),\n    fan: document.getElementById(\"fan-btn\"),\n    ac: document.getElementById(\"ac-btn\"),\n    reset: document.getElementById(\"reset-btn\")\n  };\n  let deviceStates = {\n    windows: false,\n    fan: false,\n    ac: false\n  };\n\n  // Toggle device states\n  Object.entries(controlButtons).forEach(([device, button]) => {\n    if (device !== \"reset\" && button) {\n      button.addEventListener(\"click\", () => {\n        deviceStates[device] = !deviceStates[device];\n        button.classList.toggle(\"active\", deviceStates[device]);\n        console.log('${device} turned ${deviceStates[device] ? \"on\" : \"off\"}');\n      });\n    }\n  });\n\n  // Reset button\n  if (controlButtons.reset) {\n    controlButtons.reset.addEventListener(\"click\", () => {\n      Object.keys(deviceStates).forEach(device => {\n        deviceStates[device] = false;\n        if (controlButtons[device]) {\n          controlButtons[device].classList.remove(\"active\");\n        }\n      });\n      console.log(\"All devices reset to off state\");\n    });\n  }\n\n  // Settings functionality\n  const thresholdInputs = {\n    temperature: document.getElementById(\"temp-threshold\"),\n    humidity: document.getElementById(\"humidity-target\"),\n    airQuality: document.getElementById(\"air-quality-min\")\n  };\n  Object.entries(thresholdInputs).forEach(([setting, input]) => {\n    if (input) {\n      input.addEventListener(\"input\", e => {\n        console.log('${setting} threshold set to: ${e.target.value}');\n      });\n    }\n  });\n\n  // Start sensor data updates\n  sensorData.startUpdates();\n}","map":{"version":3,"names":["initializeApp","sensorData","ChartManager","feather","replace","chartManager","navItems","document","querySelectorAll","pages","forEach","item","addEventListener","targetPage","dataset","page","nav","classList","remove","add","id","updateUI","data","getElementById","textContent","peopleCount","times","now","Date","toLocaleTimeString","time","subscribe","historicalData","updateCharts","controlButtons","windows","fan","ac","reset","deviceStates","Object","entries","device","button","toggle","console","log","keys","thresholdInputs","temperature","humidity","airQuality","setting","input","e","startUpdates"],"sources":["C:/Users/mauri/OneDrive/Documents/Programacion/JavaScript/React/retoiot1/src/js/main.js"],"sourcesContent":["export function initializeApp(sensorData, ChartManager) {\n    // Initialize Feather icons\n    feather.replace();\n\n    // Initialize charts\n    const chartManager = new ChartManager(sensorData);\n\n    // Page navigation\n    const navItems = document.querySelectorAll(\".nav-item\");\n    const pages = document.querySelectorAll(\".page\");\n\n    navItems.forEach((item) => {\n        item.addEventListener(\"click\", () => {\n            const targetPage = item.dataset.page;\n            \n            // Update navigation\n            navItems.forEach((nav) => {\n                nav.classList.remove(\"active\");\n            });\n            item.classList.add(\"active\");\n            \n            // Update pages\n            pages.forEach((page) => {\n                page.classList.remove(\"active\");\n                if (page.id === targetPage) {\n                    page.classList.add(\"active\");\n                }\n            });\n        });\n    });\n\n    // Update UI elements with sensor data\n    function updateUI(data) {\n        document.getElementById(\"temperature\").textContent = '${data.temperature.toFixed(1)}°C';\n        document.getElementById(\"humidity\").textContent = '${data.humidity}%';\n        document.getElementById(\"air-quality\").textContent = '${data.airQuality}%';\n        document.getElementById(\"people-count\").textContent = data.peopleCount;\n\n        // Update timestamps\n        const times = document.querySelectorAll(\".update-time\");\n        const now = new Date().toLocaleTimeString();\n        times.forEach((time) => {\n            time.textContent = 'Updated at ${now}';\n        });\n    }\n\n    // Subscribe to sensor data updates\n    sensorData.subscribe((data, historicalData) => {\n        updateUI(data);\n        chartManager.updateCharts(data, historicalData);\n    });\n\n    // Control buttons functionality\n    const controlButtons = {\n        windows: document.getElementById(\"windows-btn\"),\n        fan: document.getElementById(\"fan-btn\"),\n        ac: document.getElementById(\"ac-btn\"),\n        reset: document.getElementById(\"reset-btn\")\n    };\n\n    let deviceStates = {\n        windows: false,\n        fan: false,\n        ac: false\n    };\n\n    // Toggle device states\n    Object.entries(controlButtons).forEach(([device, button]) => {\n        if (device !== \"reset\" && button) {\n            button.addEventListener(\"click\", () => {\n                deviceStates[device] = !deviceStates[device];\n                button.classList.toggle(\"active\", deviceStates[device]);\n                console.log('${device} turned ${deviceStates[device] ? \"on\" : \"off\"}');\n            });\n        }\n    });\n\n    // Reset button\n    if (controlButtons.reset) {\n        controlButtons.reset.addEventListener(\"click\", () => {\n            Object.keys(deviceStates).forEach((device) => {\n                deviceStates[device] = false;\n                if (controlButtons[device]) {\n                    controlButtons[device].classList.remove(\"active\");\n                }\n            });\n            console.log(\"All devices reset to off state\");\n        });\n    }\n\n    // Settings functionality\n    const thresholdInputs = {\n        temperature: document.getElementById(\"temp-threshold\"),\n        humidity: document.getElementById(\"humidity-target\"),\n        airQuality: document.getElementById(\"air-quality-min\")\n    };\n\n    Object.entries(thresholdInputs).forEach(([setting, input]) => {\n        if (input) {\n            input.addEventListener(\"input\", (e) => {\n                console.log('${setting} threshold set to: ${e.target.value}');\n            });\n        }\n    });\n\n    // Start sensor data updates\n    sensorData.startUpdates();\n}"],"mappings":"AAAA,OAAO,SAASA,aAAaA,CAACC,UAAU,EAAEC,YAAY,EAAE;EACpD;EACAC,OAAO,CAACC,OAAO,CAAC,CAAC;;EAEjB;EACA,MAAMC,YAAY,GAAG,IAAIH,YAAY,CAACD,UAAU,CAAC;;EAEjD;EACA,MAAMK,QAAQ,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,WAAW,CAAC;EACvD,MAAMC,KAAK,GAAGF,QAAQ,CAACC,gBAAgB,CAAC,OAAO,CAAC;EAEhDF,QAAQ,CAACI,OAAO,CAAEC,IAAI,IAAK;IACvBA,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACjC,MAAMC,UAAU,GAAGF,IAAI,CAACG,OAAO,CAACC,IAAI;;MAEpC;MACAT,QAAQ,CAACI,OAAO,CAAEM,GAAG,IAAK;QACtBA,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;MAClC,CAAC,CAAC;MACFP,IAAI,CAACM,SAAS,CAACE,GAAG,CAAC,QAAQ,CAAC;;MAE5B;MACAV,KAAK,CAACC,OAAO,CAAEK,IAAI,IAAK;QACpBA,IAAI,CAACE,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;QAC/B,IAAIH,IAAI,CAACK,EAAE,KAAKP,UAAU,EAAE;UACxBE,IAAI,CAACE,SAAS,CAACE,GAAG,CAAC,QAAQ,CAAC;QAChC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,CAAC;;EAEF;EACA,SAASE,QAAQA,CAACC,IAAI,EAAE;IACpBf,QAAQ,CAACgB,cAAc,CAAC,aAAa,CAAC,CAACC,WAAW,GAAG,kCAAkC;IACvFjB,QAAQ,CAACgB,cAAc,CAAC,UAAU,CAAC,CAACC,WAAW,GAAG,mBAAmB;IACrEjB,QAAQ,CAACgB,cAAc,CAAC,aAAa,CAAC,CAACC,WAAW,GAAG,qBAAqB;IAC1EjB,QAAQ,CAACgB,cAAc,CAAC,cAAc,CAAC,CAACC,WAAW,GAAGF,IAAI,CAACG,WAAW;;IAEtE;IACA,MAAMC,KAAK,GAAGnB,QAAQ,CAACC,gBAAgB,CAAC,cAAc,CAAC;IACvD,MAAMmB,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;IAC3CH,KAAK,CAAChB,OAAO,CAAEoB,IAAI,IAAK;MACpBA,IAAI,CAACN,WAAW,GAAG,mBAAmB;IAC1C,CAAC,CAAC;EACN;;EAEA;EACAvB,UAAU,CAAC8B,SAAS,CAAC,CAACT,IAAI,EAAEU,cAAc,KAAK;IAC3CX,QAAQ,CAACC,IAAI,CAAC;IACdjB,YAAY,CAAC4B,YAAY,CAACX,IAAI,EAAEU,cAAc,CAAC;EACnD,CAAC,CAAC;;EAEF;EACA,MAAME,cAAc,GAAG;IACnBC,OAAO,EAAE5B,QAAQ,CAACgB,cAAc,CAAC,aAAa,CAAC;IAC/Ca,GAAG,EAAE7B,QAAQ,CAACgB,cAAc,CAAC,SAAS,CAAC;IACvCc,EAAE,EAAE9B,QAAQ,CAACgB,cAAc,CAAC,QAAQ,CAAC;IACrCe,KAAK,EAAE/B,QAAQ,CAACgB,cAAc,CAAC,WAAW;EAC9C,CAAC;EAED,IAAIgB,YAAY,GAAG;IACfJ,OAAO,EAAE,KAAK;IACdC,GAAG,EAAE,KAAK;IACVC,EAAE,EAAE;EACR,CAAC;;EAED;EACAG,MAAM,CAACC,OAAO,CAACP,cAAc,CAAC,CAACxB,OAAO,CAAC,CAAC,CAACgC,MAAM,EAAEC,MAAM,CAAC,KAAK;IACzD,IAAID,MAAM,KAAK,OAAO,IAAIC,MAAM,EAAE;MAC9BA,MAAM,CAAC/B,gBAAgB,CAAC,OAAO,EAAE,MAAM;QACnC2B,YAAY,CAACG,MAAM,CAAC,GAAG,CAACH,YAAY,CAACG,MAAM,CAAC;QAC5CC,MAAM,CAAC1B,SAAS,CAAC2B,MAAM,CAAC,QAAQ,EAAEL,YAAY,CAACG,MAAM,CAAC,CAAC;QACvDG,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;MAC1E,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;;EAEF;EACA,IAAIZ,cAAc,CAACI,KAAK,EAAE;IACtBJ,cAAc,CAACI,KAAK,CAAC1B,gBAAgB,CAAC,OAAO,EAAE,MAAM;MACjD4B,MAAM,CAACO,IAAI,CAACR,YAAY,CAAC,CAAC7B,OAAO,CAAEgC,MAAM,IAAK;QAC1CH,YAAY,CAACG,MAAM,CAAC,GAAG,KAAK;QAC5B,IAAIR,cAAc,CAACQ,MAAM,CAAC,EAAE;UACxBR,cAAc,CAACQ,MAAM,CAAC,CAACzB,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;QACrD;MACJ,CAAC,CAAC;MACF2B,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IACjD,CAAC,CAAC;EACN;;EAEA;EACA,MAAME,eAAe,GAAG;IACpBC,WAAW,EAAE1C,QAAQ,CAACgB,cAAc,CAAC,gBAAgB,CAAC;IACtD2B,QAAQ,EAAE3C,QAAQ,CAACgB,cAAc,CAAC,iBAAiB,CAAC;IACpD4B,UAAU,EAAE5C,QAAQ,CAACgB,cAAc,CAAC,iBAAiB;EACzD,CAAC;EAEDiB,MAAM,CAACC,OAAO,CAACO,eAAe,CAAC,CAACtC,OAAO,CAAC,CAAC,CAAC0C,OAAO,EAAEC,KAAK,CAAC,KAAK;IAC1D,IAAIA,KAAK,EAAE;MACPA,KAAK,CAACzC,gBAAgB,CAAC,OAAO,EAAG0C,CAAC,IAAK;QACnCT,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;MACjE,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;;EAEF;EACA7C,UAAU,CAACsD,YAAY,CAAC,CAAC;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}