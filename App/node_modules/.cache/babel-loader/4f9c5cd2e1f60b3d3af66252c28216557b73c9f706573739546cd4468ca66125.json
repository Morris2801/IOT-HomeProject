{"ast":null,"code":"import feather from 'feather-icons';\nexport function initializeApp(sensorData, ChartManager) {\n  console.log('Inicializando aplicación...');\n\n  // Initialize Feather icons\n  if (window.feather) {\n    feather.replace();\n  }\n\n  // Initialize charts\n  const chartManager = new ChartManager(sensorData);\n\n  // Page navigation\n  const navItems = document.querySelectorAll(\".nav-item\");\n  const pages = document.querySelectorAll(\".page\");\n  if (navItems && pages) {\n    console.log('Configurando navegación...');\n    navItems.forEach(item => {\n      item.addEventListener(\"click\", () => {\n        const targetPage = item.dataset.page;\n\n        // Update navigation\n        navItems.forEach(nav => nav.classList.remove(\"active\"));\n        item.classList.add(\"active\");\n\n        // Update pages\n        pages.forEach(page => {\n          page.classList.remove(\"active\");\n          if (page.id === targetPage) {\n            page.classList.add(\"active\");\n          }\n        });\n      });\n    });\n  }\n  function updateUI(data) {\n    console.log('Actualizando UI con datos:', data);\n    const elements = {\n      temperature: document.getElementById(\"temperature\"),\n      humidity: document.getElementById(\"humidity\"),\n      airQuality: document.getElementById(\"air-quality\"),\n      peopleCount: document.getElementById(\"people-count\")\n    };\n\n    // Update metrics if elements exist\n    if (elements.temperature) elements.temperature.textContent = `${data.temperature.toFixed(1)}°C`;\n    if (elements.humidity) elements.humidity.textContent = `${data.humidity}%`;\n    if (elements.airQuality) elements.airQuality.textContent = `${data.airQuality}%`;\n    if (elements.peopleCount) elements.peopleCount.textContent = data.peopleCount;\n\n    // Update timestamps\n    const times = document.querySelectorAll(\".update-time\");\n    const now = new Date().toLocaleTimeString();\n    times.forEach(time => {\n      time.textContent = `Updated at ${now}`;\n    });\n  }\n\n  // Set up control buttons\n  setupControlButtons();\n\n  // Set up settings\n  setupSettings();\n\n  // Subscribe to sensor data updates\n  sensorData.subscribe((data, historicalData) => {\n    updateUI(data);\n    chartManager.updateCharts(data, historicalData);\n  });\n\n  // Start sensor data updates\n  sensorData.startUpdates();\n  function setupControlButtons() {\n    const controlButtons = {\n      windows: document.getElementById(\"windows-btn\"),\n      fan: document.getElementById(\"fan-btn\"),\n      ac: document.getElementById(\"ac-btn\"),\n      reset: document.getElementById(\"reset-btn\")\n    };\n    let deviceStates = {\n      windows: false,\n      fan: false,\n      ac: false\n    };\n\n    // Toggle device states\n    Object.entries(controlButtons).forEach(([device, button]) => {\n      if (button && device !== \"reset\") {\n        button.addEventListener(\"click\", () => {\n          deviceStates[device] = !deviceStates[device];\n          button.classList.toggle(\"active\", deviceStates[device]);\n          console.log(`${device} turned ${deviceStates[device] ? \"on\" : \"off\"}`);\n        });\n      }\n    });\n\n    // Reset button\n    if (controlButtons.reset) {\n      controlButtons.reset.addEventListener(\"click\", () => {\n        Object.keys(deviceStates).forEach(device => {\n          deviceStates[device] = false;\n          if (controlButtons[device]) {\n            controlButtons[device].classList.remove(\"active\");\n          }\n        });\n        console.log(\"All devices reset to off state\");\n      });\n    }\n  }\n  function setupSettings() {\n    const thresholdInputs = {\n      temperature: document.getElementById(\"temp-threshold\"),\n      humidity: document.getElementById(\"humidity-target\"),\n      airQuality: document.getElementById(\"air-quality-min\")\n    };\n    Object.entries(thresholdInputs).forEach(([setting, input]) => {\n      if (input) {\n        input.addEventListener(\"input\", e => {\n          console.log(`${setting} threshold set to: ${e.target.value}`);\n        });\n      }\n    });\n  }\n}","map":{"version":3,"names":["feather","initializeApp","sensorData","ChartManager","console","log","window","replace","chartManager","navItems","document","querySelectorAll","pages","forEach","item","addEventListener","targetPage","dataset","page","nav","classList","remove","add","id","updateUI","data","elements","temperature","getElementById","humidity","airQuality","peopleCount","textContent","toFixed","times","now","Date","toLocaleTimeString","time","setupControlButtons","setupSettings","subscribe","historicalData","updateCharts","startUpdates","controlButtons","windows","fan","ac","reset","deviceStates","Object","entries","device","button","toggle","keys","thresholdInputs","setting","input","e","target","value"],"sources":["C:/Users/mauri/OneDrive/Documents/Programacion/JavaScript/React/retoiot1/src/js/main.js"],"sourcesContent":["import feather from 'feather-icons';\n\nexport function initializeApp(sensorData, ChartManager) {\n    console.log('Inicializando aplicación...');\n\n    // Initialize Feather icons\n    if (window.feather) {\n        feather.replace();\n    }\n\n    // Initialize charts\n    const chartManager = new ChartManager(sensorData);\n\n    // Page navigation\n    const navItems = document.querySelectorAll(\".nav-item\");\n    const pages = document.querySelectorAll(\".page\");\n\n    if (navItems && pages) {\n        console.log('Configurando navegación...');\n        navItems.forEach((item) => {\n            item.addEventListener(\"click\", () => {\n                const targetPage = item.dataset.page;\n                \n                // Update navigation\n                navItems.forEach((nav) => nav.classList.remove(\"active\"));\n                item.classList.add(\"active\");\n                \n                // Update pages\n                pages.forEach((page) => {\n                    page.classList.remove(\"active\");\n                    if (page.id === targetPage) {\n                        page.classList.add(\"active\");\n                    }\n                });\n            });\n        });\n    }\n\n    function updateUI(data) {\n        console.log('Actualizando UI con datos:', data);\n        const elements = {\n            temperature: document.getElementById(\"temperature\"),\n            humidity: document.getElementById(\"humidity\"),\n            airQuality: document.getElementById(\"air-quality\"),\n            peopleCount: document.getElementById(\"people-count\")\n        };\n\n        // Update metrics if elements exist\n        if (elements.temperature) elements.temperature.textContent = `${data.temperature.toFixed(1)}°C`;\n        if (elements.humidity) elements.humidity.textContent = `${data.humidity}%`;\n        if (elements.airQuality) elements.airQuality.textContent = `${data.airQuality}%`;\n        if (elements.peopleCount) elements.peopleCount.textContent = data.peopleCount;\n\n        // Update timestamps\n        const times = document.querySelectorAll(\".update-time\");\n        const now = new Date().toLocaleTimeString();\n        times.forEach((time) => {\n            time.textContent = `Updated at ${now}`;\n        });\n    }\n\n    // Set up control buttons\n    setupControlButtons();\n\n    // Set up settings\n    setupSettings();\n\n    // Subscribe to sensor data updates\n    sensorData.subscribe((data, historicalData) => {\n        updateUI(data);\n        chartManager.updateCharts(data, historicalData);\n    });\n\n    // Start sensor data updates\n    sensorData.startUpdates();\n\n    function setupControlButtons() {\n        const controlButtons = {\n            windows: document.getElementById(\"windows-btn\"),\n            fan: document.getElementById(\"fan-btn\"),\n            ac: document.getElementById(\"ac-btn\"),\n            reset: document.getElementById(\"reset-btn\")\n        };\n\n        let deviceStates = {\n            windows: false,\n            fan: false,\n            ac: false\n        };\n\n        // Toggle device states\n        Object.entries(controlButtons).forEach(([device, button]) => {\n            if (button && device !== \"reset\") {\n                button.addEventListener(\"click\", () => {\n                    deviceStates[device] = !deviceStates[device];\n                    button.classList.toggle(\"active\", deviceStates[device]);\n                    console.log(`${device} turned ${deviceStates[device] ? \"on\" : \"off\"}`);\n                });\n            }\n        });\n\n        // Reset button\n        if (controlButtons.reset) {\n            controlButtons.reset.addEventListener(\"click\", () => {\n                Object.keys(deviceStates).forEach((device) => {\n                    deviceStates[device] = false;\n                    if (controlButtons[device]) {\n                        controlButtons[device].classList.remove(\"active\");\n                    }\n                });\n                console.log(\"All devices reset to off state\");\n            });\n        }\n    }\n\n    function setupSettings() {\n        const thresholdInputs = {\n            temperature: document.getElementById(\"temp-threshold\"),\n            humidity: document.getElementById(\"humidity-target\"),\n            airQuality: document.getElementById(\"air-quality-min\")\n        };\n\n        Object.entries(thresholdInputs).forEach(([setting, input]) => {\n            if (input) {\n                input.addEventListener(\"input\", (e) => {\n                    console.log(`${setting} threshold set to: ${e.target.value}`);\n                });\n            }\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}